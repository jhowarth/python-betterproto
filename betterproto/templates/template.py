# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: {{ ', '.join(description.files) }}
# plugin: python-betterproto
from dataclasses import dataclass
{% if description.datetime_imports %}
from datetime import {% for i in description.datetime_imports %}{{ i }}{% if not loop.last %}, {% endif %}{% endfor %}

{% endif%}
{% if description.typing_imports %}
from typing import {% for i in description.typing_imports %}{{ i }}{% if not loop.last %}, {% endif %}{% endfor %}

{% endif %}

import betterproto

{% for i in description.imports %}
{{ i }}
{% endfor %}


{% if description.enums %}{% for enum in description.enums %}
class {{ enum.py_name }}(betterproto.Enum):
    {% if enum.comment %}
{{ enum.comment }}

    {% endif %}
    {% for entry in enum.entries %}
        {% if entry.comment %}
{{ entry.comment }}
        {% endif %}
    {{ entry.name }} = {{ entry.value }}
    {% endfor %}


{% endfor %}
{% endif %}
{% for message in description.messages %}
@dataclass
class {{ message.py_name }}(betterproto.Message):
    {% if message.comment %}
{{ message.comment }}

    {% endif %}
    {% for field in message.properties %}
        {% if field.comment %}
{{ field.comment }}
        {% endif %}
    {{ field.py_name }}: {{ field.type }} = betterproto.{{ field.field_type }}_field({{ field.number }}{% if field.field_type == 'map'%}, betterproto.{{ field.map_types[0] }}, betterproto.{{ field.map_types[1] }}{% endif %}{% if field.one_of %}, group="{{ field.one_of }}"{% endif %}{% if field.field_wraps %}, wraps={{ field.field_wraps }}{% endif %})
    {% endfor %}
    {% if not message.properties %}
    pass
    {% endif %}


{% endfor %}

{% for service in description.services %}
class {{ service.py_name }}Stub(object):
    {% if service.comment %}
{{ service.comment }}

    {% endif %}
    def __init__(self, channel):
        {% for method in service.methods %}
            {% if method.comment %}
{{ method.comment }}

            {% endif %}

            {% if method.server_streaming %}
        self.{{ method.py_name }} = channel.unary_stream(
            {% else %}
        self.{{ method.py_name }} = channel.unary_unary(
            {% endif %}
            "{{ method.route }}",
            request_serializer=bytes,
            response_deserializer=lambda response: {{ method.output }}().parse(response),
        )


        {% endfor %}
{% endfor %}
